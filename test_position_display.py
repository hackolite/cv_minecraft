#!/usr/bin/env python3
"""
Test pour l'affichage permanent de la position utilisateur.
V√©rifie que la position est affich√©e sous la forme "x:valeur, y:valeur, z:valeur".
"""

import sys
import os

# Add current directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_position_display_format():
    """Test que la position est format√©e correctement."""
    
    # Test simple de formatage sans importer les classes graphiques
    test_positions = [
        ((10.5, 20.3, -5.7), "x:10.5, y:20.3, z:-5.7"),
        ((0.0, 0.0, 0.0), "x:0.0, y:0.0, z:0.0"),
        ((100.123, -50.789, 25.456), "x:100.1, y:-50.8, z:25.5"),
        ((-12.34, 64.78, -99.12), "x:-12.3, y:64.8, z:-99.1")
    ]
    
    for pos, expected in test_positions:
        x, y, z = pos
        formatted = f"x:{x:.1f}, y:{y:.1f}, z:{z:.1f}"
        assert formatted == expected, f"Position {pos}: attendu '{expected}', obtenu '{formatted}'"
        print(f"‚úÖ Position {pos} format√©e correctement: {formatted}")
    
    return True

def test_method_exists():
    """Test que la m√©thode update_position_display existe dans le code."""
    
    try:
        # Lire le fichier source pour v√©rifier que la m√©thode existe
        with open('minecraft_client_fr.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier que la m√©thode update_position_display existe
        assert 'def update_position_display(self):' in content, "M√©thode update_position_display non trouv√©e"
        print("‚úÖ M√©thode update_position_display trouv√©e dans le code")
        
        # V√©rifier que le label de position est cr√©√©
        assert 'self.position_label = pyglet.text.Label(' in content, "Label de position non trouv√©"
        print("‚úÖ Label de position trouv√© dans setup_ui")
        
        # V√©rifier que le label de position est dessin√©
        assert 'self.position_label.draw()' in content, "Appel √† position_label.draw() non trouv√©"
        print("‚úÖ Appel √† position_label.draw() trouv√© dans draw_ui")
        
        # V√©rifier que update_position_display est appel√©
        assert 'self.update_position_display()' in content, "Appel √† update_position_display non trouv√©"
        print("‚úÖ Appel √† update_position_display trouv√© dans update_ui")
        
        # V√©rifier le format de la position
        format_pattern = 'f"x:{x:.1f}, y:{y:.1f}, z:{z:.1f}"'
        assert format_pattern in content, "Format de position correct non trouv√©"
        print("‚úÖ Format de position correct trouv√©: x:valeur, y:valeur, z:valeur")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False

def test_ui_structure():
    """Test que la structure UI est correcte."""
    
    try:
        with open('minecraft_client_fr.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier que le label de position a une couleur distincte
        assert 'color=(0, 255, 255, 255)' in content, "Couleur cyan du label de position non trouv√©e"
        print("‚úÖ Label de position a une couleur cyan distinctive")
        
        # V√©rifier que le label de position est positionn√© correctement
        assert 'y=self.height - 60' in content, "Position Y du label de position non trouv√©e"
        print("‚úÖ Label de position bien positionn√© (y=height-60)")
        
        # V√©rifier que draw_ui dessine la position en premier
        draw_ui_start = content.find('def draw_ui(self):')
        position_draw = content.find('self.position_label.draw()', draw_ui_start)
        debug_draw = content.find('if self.show_debug:', draw_ui_start)
        
        assert position_draw < debug_draw, "Position label doit √™tre dessin√© avant les infos debug"
        print("‚úÖ Label de position dessin√© avant les infos debug (toujours visible)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de structure UI: {e}")
        return False

if __name__ == "__main__":
    print("üß™ Test de l'affichage permanent de la position...\n")
    
    try:
        success = True
        success &= test_position_display_format()
        success &= test_method_exists()
        success &= test_ui_structure()
        
        if success:
            print("\nüéâ TESTS R√âUSSIS!")
            print("‚úÖ La position est affich√©e sous la forme 'x:valeur, y:valeur, z:valeur'")
            print("‚úÖ L'affichage est permanent (ind√©pendant du mode debug)")
            print("‚úÖ L'int√©gration UI fonctionne correctement")
            print("‚úÖ Le label de position a une couleur distinctive")
            print("‚úÖ Le label de position est toujours visible")
        else:
            print("\n‚ùå Certains tests ont √©chou√©")
            sys.exit(1)
            
    except Exception as e:
        print(f"\n‚ùå Erreur g√©n√©rale lors des tests: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)