#!/usr/bin/env python3
"""
Integration test for unified cube-based player system.
Tests the full Window class integration with cube-based local player.
"""

import sys
import os
import unittest.mock as mock
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_window_integration():
    """Test Window class integration with cube-based local player."""
    
    # Mock all the dependencies
    mocks = {
        'pyglet': mock.MagicMock(),
        'pyglet.window': mock.MagicMock(),
        'pyglet.graphics': mock.MagicMock(),
        'pyglet.graphics.TextureGroup': mock.MagicMock(),
        'pyglet.image': mock.MagicMock(),
        'pyglet.gl': mock.MagicMock(),
        'pyglet.window.key': mock.MagicMock(),
        'pyglet.window.mouse': mock.MagicMock(),
        'pyglet.text': mock.MagicMock(),
        'pyglet.clock': mock.MagicMock(),
        'OpenGL.GL': mock.MagicMock(),
        'OpenGL.GLU': mock.MagicMock(),
        'websockets': mock.MagicMock(),
        'asyncio': mock.MagicMock(),
    }
    
    with mock.patch.dict('sys.modules', mocks):
        with mock.patch('pyglet.image.load') as mock_image_load:
            mock_texture = mock.MagicMock()
            mock_image_load.return_value.get_texture.return_value = mock_texture
            
            with mock.patch('pyglet.graphics.TextureGroup'):
                with mock.patch('pyglet.graphics.Batch'):
                    with mock.patch('pyglet.text.Label'):
                        with mock.patch('pyglet.clock.schedule_interval'):
                            with mock.patch('threading.Thread'):
                                # Import after mocking
                                from client import Window
                                from protocol import PlayerState, Cube
                                
                                # Import after mocking
                                from client import ClientModel
                                from protocol import PlayerState, Cube
                                
                                # Create a basic model to test cube functionality
                                model = ClientModel()
                                
                                # Test 1: Create local player cube
                                local_player = model.create_local_player("local_123", (10, 20, 30), (45, -10), "LocalPlayer")
                                
                                assert local_player is not None, "Player cube should be created"
                                assert isinstance(local_player, PlayerState), "Player cube should be PlayerState"
                                assert isinstance(local_player, Cube), "Player cube should be Cube"
                                assert local_player.is_local == True, "Player cube should be local"
                                
                                print("‚úÖ Local player cube created correctly")
                                
                                # Test 2: Position and rotation updates work
                                original_pos = local_player.position
                                original_rot = local_player.rotation
                                
                                # Update position through cube
                                new_pos = (100, 200, 300)
                                local_player.update_position(new_pos)
                                assert local_player.position == new_pos, "Position should be updated"
                                
                                # Update rotation through cube
                                new_rot = (45, -30)
                                local_player.update_rotation(new_rot)
                                assert local_player.rotation == new_rot, "Rotation should be updated"
                                
                                print("‚úÖ Position and rotation updates work correctly")
                                
                                # Test 3: Flying and sprinting state work
                                local_player.flying = True
                                assert local_player.flying == True, "Flying should be settable"
                                
                                local_player.sprinting = True
                                assert local_player.sprinting == True, "Sprinting should be settable"
                                
                                print("‚úÖ Player state properties work correctly")
                                
                                # Test 4: Local player is in model's cubes
                                assert local_player.id in model.cubes, "Local player should be in cubes"
                                assert model.local_player is local_player, "Model should reference local player"
                                
                                print("‚úÖ Local player is properly managed in model")
                                
                                # Test 5: Other players can be added
                                remote_player = PlayerState("remote_789", (400, 500, 600), (90, 45), "RemotePlayer")
                                model.add_cube(remote_player)
                                
                                assert len(model.get_all_cubes()) == 2, "Should have local and remote cubes"
                                assert len(model.get_other_cubes()) == 1, "Should have one other cube"
                                assert len(model.other_players) == 1, "Should have one other player"
                                
                                print("‚úÖ Remote players can be added to unified system")
                                
                                return True

def test_cube_update_integration():
    """Test the update_all_cubes integration."""
    
    # Mock dependencies
    mocks = {
        'pyglet.graphics': mock.MagicMock(),
        'pyglet.graphics.TextureGroup': mock.MagicMock(),
        'pyglet.image': mock.MagicMock(),
        'pyglet.gl': mock.MagicMock(),
        'OpenGL.GL': mock.MagicMock(),
        'OpenGL.GLU': mock.MagicMock(),
    }
    
    with mock.patch.dict('sys.modules', mocks):
        with mock.patch('pyglet.image.load') as mock_image_load:
            mock_texture = mock.MagicMock()
            mock_image_load.return_value.get_texture.return_value = mock_texture
            
            with mock.patch('pyglet.graphics.TextureGroup'):
                with mock.patch('pyglet.graphics.Batch'):
                    from client import ClientModel
                    from protocol import PlayerState
                    
                    model = ClientModel()
                    
                    # Add local and remote players
                    local_player = model.create_local_player("local_abc", (10, 20, 30))
                    remote_player = PlayerState("remote_def", (40, 50, 60), (0, 0))
                    model.add_cube(remote_player)
                    
                    # Test update_all_cubes runs without errors
                    model.update_all_cubes(0.016)  # ~60 FPS
                    
                    print("‚úÖ update_all_cubes processes all cubes without errors")
                    
                    return True

if __name__ == "__main__":
    print("üß™ Testing Window integration with unified cube system...\n")
    
    try:
        success = True
        success &= test_window_integration()
        success &= test_cube_update_integration()
        
        if success:
            print("\nüéâ WINDOW INTEGRATION TESTS PASSED!")
            print("‚úÖ Window class properly uses cube-based local player")
            print("‚úÖ Position and rotation properties delegate to cube")
            print("‚úÖ Flying and sprinting properties work with cube")
            print("‚úÖ Local player is managed in unified cube system")
            print("‚úÖ Remote players integrate seamlessly")
            print("‚úÖ Update loop processes all cubes uniformly")
        else:
            print("\n‚ùå Window integration tests failed")
            sys.exit(1)
            
    except Exception as e:
        print(f"\n‚ùå Test error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)