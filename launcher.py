#!/usr/bin/env python3
"""
Lanceur pour le Client Minecraft Fran√ßais
=========================================

Ce script permet de lancer le client Minecraft avec diff√©rentes options
et g√®re les cas o√π OpenGL n'est pas disponible (environnements sans t√™te).
"""

import sys
import os
import argparse

def show_help():
    """Affiche l'aide du client."""
    print("""
üéÆ Client Minecraft Fran√ßais - Aide
===================================

USAGE:
    python3 minecraft_client_fr.py [OPTIONS]
    python3 launcher.py [OPTIONS]

OPTIONS:
    --server, -s HOST:PORT    Adresse du serveur (d√©faut: localhost:8765)
    --config, -c FILE         Fichier de configuration (d√©faut: client_config.json)
    --fullscreen, -f          D√©marrer en plein √©cran
    --debug, -d               Activer le mode debug
    --lang LANG               Langue de l'interface (fr/en, d√©faut: fr)
    --help, -h                Afficher cette aide

EXEMPLES:
    # Connexion locale par d√©faut
    python3 minecraft_client_fr.py
    
    # Connexion √† un serveur distant
    python3 minecraft_client_fr.py --server 192.168.1.100:8765
    
    # Mode plein √©cran avec debug
    python3 minecraft_client_fr.py --fullscreen --debug
    
    # Utilisation d'un fichier de configuration personnalis√©
    python3 minecraft_client_fr.py --config mon_config.json

CONTR√îLES (Layout AZERTY par d√©faut):
    Z/Q/S/D       Mouvement (avant/gauche/arri√®re/droite)
    Espace        Saut
    Maj Gauche    S'accroupir
    R             Courir
    Tab           Activer/d√©sactiver le vol
    F3            Afficher/masquer les informations de debug
    F11           Basculer en plein √©cran
    √âchap         Lib√©rer le curseur de la souris
    1-5           S√©lectionner un type de bloc
    
    Clic gauche   D√©truire un bloc
    Clic droit    Placer un bloc

CONFIGURATION:
    Le client g√©n√®re automatiquement un fichier client_config.json
    avec toutes les options configurables :
    - Param√®tres r√©seau (serveur, timeout, reconnexion)
    - Param√®tres graphiques (r√©solution, FOV, distance de rendu)
    - Contr√¥les (layout clavier, sensibilit√© souris)
    - Interface (langue, couleurs, affichage debug)
    - Audio (volumes, effets)
    - Joueur (nom, vitesses, position de spawn)

COMPATIBILIT√â:
    - Pyglet 1.5.27+ pour le rendu
    - WebSockets pour la communication r√©seau
    - Support Windows/Mac/Linux
    - Layout clavier AZERTY et QWERTY
    - Interface en fran√ßais et anglais

D√âPENDANCES:
    pip install -r requirements.txt
    
    Packages requis:
    - pyglet==1.5.27
    - websockets==12.0
    - PyOpenGL
    - asyncio

PROBL√àMES COURANTS:
    1. "Library GLU not found" ‚Üí Installer les biblioth√®ques OpenGL syst√®me
    2. "Connection failed" ‚Üí V√©rifier que le serveur fonctionne
    3. "Permission denied" ‚Üí V√©rifier les droits d'√©criture pour le config
    
Pour plus d'informations, voir README.md et CONVERSION_GUIDE.md
""")

def check_environment():
    """V√©rifie l'environnement d'ex√©cution."""
    issues = []
    
    # V√©rification Python
    if sys.version_info < (3, 6):
        issues.append("Python 3.6+ requis")
    
    # V√©rification des modules
    try:
        import pyglet
    except ImportError:
        issues.append("Pyglet non install√© (pip install pyglet==1.5.27)")
    
    try:
        import websockets
    except ImportError:
        issues.append("WebSockets non install√© (pip install websockets==12.0)")
    
    try:
        import OpenGL.GL
    except ImportError:
        issues.append("PyOpenGL non install√© (pip install PyOpenGL)")
    
    # V√©rification des fichiers
    required_files = ['protocol.py', 'texture.png']
    for file in required_files:
        if not os.path.exists(file):
            issues.append(f"Fichier manquant: {file}")
    
    return issues

def main():
    """Point d'entr√©e principal du lanceur."""
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument('--help', '-h', action='store_true')
    parser.add_argument('--check', action='store_true', help='V√©rifier l\'environnement')
    args, remaining = parser.parse_known_args()
    
    if args.help:
        show_help()
        return 0
    
    if args.check:
        print("üîç V√©rification de l'environnement...")
        issues = check_environment()
        
        if not issues:
            print("‚úÖ Environnement OK - pr√™t √† lancer le client")
            return 0
        else:
            print("‚ùå Probl√®mes d√©tect√©s:")
            for issue in issues:
                print(f"  - {issue}")
            return 1
    
    # Tentative de lancement du client principal
    try:
        print("üöÄ Lancement du client Minecraft...")
        
        # Reconstruction des arguments
        sys.argv = ['minecraft_client_fr.py'] + remaining
        
        # Import et lancement du client principal
        import minecraft_client_fr
        return minecraft_client_fr.main()
        
    except ImportError as e:
        if "GLU" in str(e) or "OpenGL" in str(e):
            print("‚ùå Erreur OpenGL: Environnement graphique non disponible")
            print("üí° Ce programme n√©cessite un environnement graphique avec OpenGL")
            print("üí° Sur un serveur, utilisez Xvfb ou un bureau virtuel")
            return 1
        else:
            print(f"‚ùå Erreur d'import: {e}")
            return 1
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())