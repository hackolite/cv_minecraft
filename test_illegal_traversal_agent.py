#!/usr/bin/env python3
"""
Test pour l'agent de d√©tection de travers√©e ill√©gale de blocs.
V√©rifie que l'agent d√©tecte correctement les travers√©es et log selon le format requis.
"""

import logging
import sys
import os
import io
from datetime import datetime

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from illegal_traversal_agent import IllegalBlockTraversalAgent


def setup_logging_capture():
    """Configure le logging pour capturer les logs de travers√©e ill√©gale."""
    # Cr√©er un buffer pour capturer les logs
    log_capture = io.StringIO()
    
    # Cr√©er un handler pour le logger de travers√©e
    handler = logging.StreamHandler(log_capture)
    handler.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    
    # Obtenir le logger de travers√©e et ajouter notre handler
    traversal_logger = logging.getLogger('illegal_traversal')
    traversal_logger.setLevel(logging.INFO)
    traversal_logger.addHandler(handler)
    
    return log_capture, traversal_logger


def test_illegal_traversal_detection():
    """Test de d√©tection de travers√©e ill√©gale."""
    print("üß™ Test de d√©tection de travers√©e ill√©gale de blocs")
    
    # Setup logging capture
    log_capture, traversal_logger = setup_logging_capture()
    
    # Cr√©er un monde avec un bloc solide
    world = {(10, 10, 10): 'stone'}
    agent = IllegalBlockTraversalAgent(world)
    
    # Test de travers√©e: joueur passe d'une position valide √† l'int√©rieur d'un bloc
    old_position = (9.0, 10.0, 10.0)  # Position valide
    new_position = (10.5, 10.5, 10.5)  # Position √† l'int√©rieur du bloc stone
    
    # V√©rifier que la travers√©e est d√©tect√©e
    result = agent.check_traversal("player123", "TestPlayer", old_position, new_position)
    
    # V√©rifier le r√©sultat
    assert result == True, "Should detect illegal traversal"
    
    # Obtenir les logs captur√©s
    log_output = log_capture.getvalue()
    print("Logs captur√©s:")
    print(log_output)
    
    # V√©rifier le format des logs selon les exigences
    assert "WARNING" in log_output, "Should have WARNING level log"
    assert "üö® ILLEGAL BLOCK TRAVERSAL" in log_output, "Should have illegal traversal warning"
    assert "Player TestPlayer (player123)" in log_output, "Should include player name and ID"
    assert "traversed solid block" in log_output, "Should mention traversed solid block"
    assert "(10, 10, 10)" in log_output, "Should include block position"
    assert "Old position:" in log_output, "Should log old position"
    assert "New position:" in log_output, "Should log new position"
    assert "Block type: stone" in log_output, "Should log block type"
    assert str(old_position) in log_output, "Should include old position values"
    assert str(new_position) in log_output, "Should include new position values"
    
    print("‚úÖ Test de d√©tection de travers√©e: R√âUSSI")
    return True


def test_no_traversal_no_detection():
    """Test qu'aucune travers√©e = aucune d√©tection."""
    print("\nüß™ Test qu'aucune travers√©e = aucune d√©tection")
    
    # Setup logging capture
    log_capture, traversal_logger = setup_logging_capture()
    
    # Cr√©er un monde avec un bloc solide
    world = {(10, 10, 10): 'stone'}
    agent = IllegalBlockTraversalAgent(world)
    
    # Test de mouvement valide: joueur reste dans l'air
    old_position = (9.0, 10.0, 10.0)  # Position valide
    new_position = (8.0, 10.0, 10.0)  # Autre position valide
    
    # V√©rifier qu'aucune travers√©e n'est d√©tect√©e
    result = agent.check_traversal("player123", "TestPlayer", old_position, new_position)
    
    # V√©rifier le r√©sultat
    assert result == False, "Should not detect traversal for valid movement"
    
    # Obtenir les logs captur√©s
    log_output = log_capture.getvalue()
    print(f"Logs captur√©s (devrait √™tre vide): '{log_output}'")
    
    # V√©rifier qu'aucun log n'est g√©n√©r√©
    assert log_output.strip() == "", "Should not log when no traversal"
    
    print("‚úÖ Test aucune travers√©e: R√âUSSI")
    return True


def test_disconnection_logging():
    """Test du logging de d√©connexion."""
    print("\nüß™ Test du logging de d√©connexion")
    
    # Setup logging capture
    log_capture, traversal_logger = setup_logging_capture()
    
    # Cr√©er un agent
    world = {(10, 10, 10): 'stone'}
    agent = IllegalBlockTraversalAgent(world)
    
    # Test du logging de d√©connexion
    agent.log_disconnection("player123", "TestPlayer")
    
    # Obtenir les logs captur√©s
    log_output = log_capture.getvalue()
    print("Logs captur√©s:")
    print(log_output)
    
    # V√©rifier le format du log de d√©connexion
    assert "INFO" in log_output, "Should have INFO level log"
    assert "Player TestPlayer (player123) disconnected for illegal block traversal." in log_output, "Should log disconnection with specific message"
    
    print("‚úÖ Test de logging de d√©connexion: R√âUSSI")
    return True


def test_different_block_types():
    """Test avec diff√©rents types de blocs."""
    print("\nüß™ Test avec diff√©rents types de blocs")
    
    # Setup logging capture
    log_capture, traversal_logger = setup_logging_capture()
    
    # Cr√©er un monde avec diff√©rents types de blocs
    world = {
        (10, 10, 10): 'grass',
        (11, 10, 10): 'wood',
        (12, 10, 10): 'air'  # Ne devrait pas d√©clencher de travers√©e
    }
    agent = IllegalBlockTraversalAgent(world)
    
    # Test avec bloc grass
    result = agent.check_traversal("player1", "Player1", (9.0, 10.0, 10.0), (10.5, 10.5, 10.5))
    assert result == True, "Should detect traversal of grass block"
    
    # Test avec bloc wood
    result = agent.check_traversal("player2", "Player2", (10.0, 10.0, 10.0), (11.5, 10.5, 10.5))
    assert result == True, "Should detect traversal of wood block"
    
    # Test avec bloc air (ne devrait pas d√©clencher)
    result = agent.check_traversal("player3", "Player3", (11.0, 10.0, 10.0), (12.5, 10.5, 10.5))
    assert result == False, "Should not detect traversal of air block"
    
    # V√©rifier les logs
    log_output = log_capture.getvalue()
    assert "Block type: grass" in log_output, "Should log grass block type"
    assert "Block type: wood" in log_output, "Should log wood block type"
    
    print("‚úÖ Test avec diff√©rents types de blocs: R√âUSSI")
    return True


def main():
    """Ex√©cute tous les tests de l'agent de travers√©e ill√©gale."""
    print("üöÄ Tests de l'agent de d√©tection de travers√©e ill√©gale - Minecraft CV")
    print("=" * 80)
    
    try:
        # Test de d√©tection de travers√©e ill√©gale
        test_illegal_traversal_detection()
        
        # Test qu'aucune travers√©e = aucune d√©tection
        test_no_traversal_no_detection()
        
        # Test du logging de d√©connexion
        test_disconnection_logging()
        
        # Test avec diff√©rents types de blocs
        test_different_block_types()
        
        print("\n" + "=" * 80)
        print("‚úÖ TOUS LES TESTS PASSENT!")
        print("‚úÖ L'agent de d√©tection de travers√©e ill√©gale fonctionne correctement")
        print("‚úÖ Les logs respectent le format requis")
        print("‚úÖ La d√©connexion est correctement logg√©e")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur dans les tests: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)