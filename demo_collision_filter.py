#!/usr/bin/env python3
"""
D√©monstration du syst√®me de filtrage des logs de collision.
Outil en ligne de commande pour tester diff√©rents filtres.
"""

import argparse
import logging
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from minecraft_physics import UnifiedCollisionManager

def setup_logging(collision_only=False):
    """Configure le logging selon les options."""
    if collision_only:
        # Ne configurer que le logger de collision
        collision_logger = logging.getLogger('minecraft_collision')
        collision_logger.setLevel(logging.INFO)
        
        # Cr√©er un handler simple sans timestamp pour collision_only
        handler = logging.StreamHandler()
        handler.setFormatter(logging.Formatter('%(message)s'))
        collision_logger.addHandler(handler)
        collision_logger.propagate = False
    else:
        # Configuration standard avec tous les loggers
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(message)s'
        )

def run_collision_test(blocks=True, players=True, collision_only=False):
    """Ex√©cute un test de collision avec les filtres sp√©cifi√©s."""
    
    # Configurer le logging
    setup_logging(collision_only)
    
    # Cr√©er un monde de test
    world = {
        (10, 10, 10): 'stone',
        (15, 12, 8): 'grass'
    }
    
    manager = UnifiedCollisionManager(world)
    
    # Create a simple player class for testing
    class TestPlayer:
        def __init__(self, position, player_id):
            self.position = position
            self.id = player_id
    
    # Ajouter des joueurs fictifs
    players_list = [
        TestPlayer((5, 10, 5), "alice"),
        TestPlayer((20, 10, 20), "bob")
    ]
    manager.set_other_players(players_list)
    
    # Configurer les filtres
    config = {
        "collision_blocks": blocks,
        "collision_players": players,
        "collision_only": collision_only
    }
    manager.configure_collision_logging(config)
    
    print(f"üîß Configuration: blocs={blocks}, joueurs={players}, collision_only={collision_only}")
    print("-" * 60)
    
    if not collision_only:
        print("üìù Test avec logs syst√®me inclus:")
        logging.info("Ceci est un log syst√®me normal")
        logging.warning("Ceci est un avertissement syst√®me")
    
    print("üß± Test collision avec bloc:")
    collision1 = manager.check_block_collision((10.5, 10.5, 10.5))
    
    print("\nüë• Test collision entre joueurs:")
    collision2 = manager.check_player_collision((5.3, 10.0, 5.2))
    
    print(f"\nR√©sultats: collision_bloc={collision1}, collision_joueur={collision2}")
    print("=" * 60)

def main():
    """Point d'entr√©e principal."""
    parser = argparse.ArgumentParser(
        description="D√©monstration du filtrage des logs de collision",
        epilog="""
Exemples d'usage:
  %(prog)s --collision-only              # Uniquement les logs de collision
  %(prog)s --no-blocks                   # Pas de logs de collision de blocs
  %(prog)s --no-players                  # Pas de logs de collision de joueurs
  %(prog)s --collision-only --no-players # Uniquement les collisions de blocs
        """,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument('--no-blocks', action='store_true',
                       help='D√©sactiver les logs de collision avec blocs')
    parser.add_argument('--no-players', action='store_true',
                       help='D√©sactiver les logs de collision entre joueurs')
    parser.add_argument('--collision-only', action='store_true',
                       help='Afficher uniquement les logs de collision (pas les logs syst√®me)')
    
    args = parser.parse_args()
    
    # D√©terminer les param√®tres
    blocks = not args.no_blocks
    players = not args.no_players
    collision_only = args.collision_only
    
    print("üöÄ D√âMONSTRATION DU FILTRAGE DES LOGS DE COLLISION")
    print("=" * 70)
    
    # Ex√©cuter le test
    run_collision_test(blocks=blocks, players=players, collision_only=collision_only)
    
    print("\n‚úÖ D√©monstration termin√©e")
    
    if collision_only:
        print("üí° Note: Mode 'collision-only' activ√© - seuls les logs de collision sont affich√©s")
    
    print("\nüîß Autres exemples √† essayer:")
    print("  python3 demo_collision_filter.py --collision-only")
    print("  python3 demo_collision_filter.py --no-blocks")
    print("  python3 demo_collision_filter.py --no-players")
    print("  python3 demo_collision_filter.py --collision-only --no-players")

if __name__ == "__main__":
    main()