#!/usr/bin/env python3
"""
Camera User Manager - Gestionnaire d'utilisateurs cam√©ra
========================================================

Ce module g√®re la cr√©ation automatique d'utilisateurs avec serveurs FastAPI
quand des blocs cam√©ra sont plac√©s dans le monde Minecraft.

Fonctionnalit√©s:
- Cr√©ation d'utilisateurs cam√©ra avec serveurs FastAPI individuels
- Gestion des ports uniques pour chaque cam√©ra
- Surveillance des blocs cam√©ra plac√©s/supprim√©s
- API pour r√©cup√©rer la liste des cam√©ras actives
"""

import threading
import time
import asyncio
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
import logging

from protocol import BlockType

# Configuration
CAMERA_PORT_START = 8081  # Port de d√©part pour les cam√©ras (8080 est souvent utilis√© par le client principal)
CAMERA_USER_PREFIX = "Camera"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class CameraUser:
    """Repr√©sente un utilisateur cam√©ra avec son serveur FastAPI."""
    id: str
    position: Tuple[int, int, int]
    port: int
    running: bool = False

class CameraUserManager:
    """Gestionnaire global des utilisateurs cam√©ra."""
    
    def __init__(self):
        self.cameras: Dict[str, CameraUser] = {}
        self.used_ports: set = set()
        self.next_camera_id = 1
        
    def get_next_port(self) -> int:
        """Trouve le prochain port disponible pour une cam√©ra."""
        port = CAMERA_PORT_START
        while port in self.used_ports:
            port += 1
        return port
    
    def generate_camera_id(self, position: Tuple[int, int, int]) -> str:
        """G√©n√®re un ID unique pour une cam√©ra bas√© sur sa position."""
        return f"{CAMERA_USER_PREFIX}_{position[0]}_{position[1]}_{position[2]}"
    
    def _display_camera_endpoints(self, camera: CameraUser):
        """Affiche les endpoints disponibles pour une cam√©ra dans le terminal."""
        print(f"\nüìπ Cam√©ra {camera.id} cr√©√©e √† la position {camera.position}")
        print(f"üåê Endpoints disponibles et leurs fonctionnalit√©s:")
        print(f"   ‚Ä¢ API de base:          http://localhost:{camera.port}/")
        print(f"     ‚Üí Informations g√©n√©rales de l'API et liste des endpoints")
        print(f"   ‚Ä¢ Vue de la cam√©ra:     http://localhost:{camera.port}/get_view")
        print(f"     ‚Üí Capture d'√©cran PNG de ce que voit la cam√©ra")
        print(f"   ‚Ä¢ Statut complet:       http://localhost:{camera.port}/status")
        print(f"     ‚Üí Position, rotation, √©tat de vol, blocs visibles, etc.")
        print(f"   ‚Ä¢ Mouvement relatif:    POST http://localhost:{camera.port}/move?dx=X&dy=Y&dz=Z")
        print(f"     ‚Üí D√©place la cam√©ra de fa√ßon relative (dx, dy, dz)")
        print(f"   ‚Ä¢ T√©l√©portation:        POST http://localhost:{camera.port}/teleport?x=X&y=Y&z=Z")
        print(f"     ‚Üí T√©l√©porte la cam√©ra √† une position absolue")
        print(f"   ‚Ä¢ Placer un bloc:       POST http://localhost:{camera.port}/place_block?x=X&y=Y&z=Z&block_type=TYPE")
        print(f"     ‚Üí Place un bloc √† la position sp√©cifi√©e (STONE, GRASS, etc.)")
        print(f"   ‚Ä¢ Supprimer un bloc:    POST http://localhost:{camera.port}/remove_block?x=X&y=Y&z=Z")
        print(f"     ‚Üí Supprime le bloc √† la position sp√©cifi√©e")
        print(f"   ‚Ä¢ Documentation API:    http://localhost:{camera.port}/docs")
        print(f"     ‚Üí Interface Swagger interactive pour tester l'API")
        print(f"üîß √âtat: {'üü¢ Actif' if camera.running else 'üî¥ Inactif'}")
        print(f"üìç Position: x={camera.position[0]}, y={camera.position[1]}, z={camera.position[2]}")
        print(f"üîå Port: {camera.port}")
        print()

    def create_camera_user(self, position: Tuple[int, int, int]) -> Optional[CameraUser]:
        """Cr√©e un nouvel utilisateur cam√©ra √† la position sp√©cifi√©e."""
        camera_id = self.generate_camera_id(position)
        
        if camera_id in self.cameras:
            logger.warning(f"Cam√©ra {camera_id} existe d√©j√† √† la position {position}")
            # Afficher les endpoints de la cam√©ra existante
            self._display_camera_endpoints(self.cameras[camera_id])
            return self.cameras[camera_id]
        
        port = self.get_next_port()
        self.used_ports.add(port)
        
        # Cr√©er l'utilisateur cam√©ra
        camera = CameraUser(
            id=camera_id,
            position=position,
            port=port
        )
        
        # Marquer la cam√©ra comme active (simulation d'un serveur)
        camera.running = True
        
        # Ajouter √† la liste des cam√©ras
        self.cameras[camera_id] = camera
        
        # Afficher les endpoints disponibles dans le terminal au lieu de cr√©er une fen√™tre
        self._display_camera_endpoints(camera)
        
        logger.info(f"Cam√©ra {camera_id} cr√©√©e avec succ√®s sur le port {port}")
        return camera
    
    def remove_camera_user(self, position: Tuple[int, int, int]) -> bool:
        """Supprime un utilisateur cam√©ra √† la position sp√©cifi√©e."""
        camera_id = self.generate_camera_id(position)
        
        if camera_id not in self.cameras:
            logger.warning(f"Aucune cam√©ra trouv√©e √† la position {position}")
            return False
        
        camera = self.cameras[camera_id]
        
        try:
            # Marquer la cam√©ra comme inactive
            camera.running = False
            
            # Lib√©rer le port
            self.used_ports.discard(camera.port)
            
            # Supprimer de la liste
            del self.cameras[camera_id]
            
            print(f"üóëÔ∏è  Cam√©ra {camera_id} supprim√©e de la position {position}")
            logger.info(f"Cam√©ra {camera_id} supprim√©e avec succ√®s")
            return True
            
        except Exception as e:
            logger.error(f"Erreur lors de la suppression de la cam√©ra {camera_id}: {e}")
            return False
    
    def get_cameras(self) -> List[Dict]:
        """Retourne la liste de toutes les cam√©ras actives."""
        cameras_info = []
        for camera in self.cameras.values():
            cameras_info.append({
                "id": camera.id,
                "position": camera.position,
                "port": camera.port,
                "running": camera.running,
                "url": f"http://localhost:{camera.port}",
                "view_endpoint": f"http://localhost:{camera.port}/get_view"
            })
        return cameras_info
    
    def get_camera_at_position(self, position: Tuple[int, int, int]) -> Optional[CameraUser]:
        """R√©cup√®re la cam√©ra √† une position donn√©e."""
        camera_id = self.generate_camera_id(position)
        return self.cameras.get(camera_id)

# Instance globale du gestionnaire
camera_manager = CameraUserManager()