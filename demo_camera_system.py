#!/usr/bin/env python3
"""
D√©mo du Syst√®me de Cam√©ras - Demo Camera System
===============================================

Ce script d√©montre le syst√®me de cam√©ras en:
1. D√©marrant un serveur Minecraft
2. Cr√©ant un client qui place des blocs cam√©ra
3. V√©rifiant que les cam√©ras sont cr√©√©es avec leurs serveurs FastAPI
4. Testant les endpoints des cam√©ras

Usage:
    python3 demo_camera_system.py
"""

import asyncio
import threading
import time
import requests
import json
import sys
from typing import Optional

from server import MinecraftServer
from minecraft_client import MinecraftClient
from camera_user_manager import camera_manager
from protocol import BlockType

# Configuration
SERVER_PORT = 8765
CLIENT_PORT = 8080
TEST_POSITIONS = [
    (50, 60, 50),
    (60, 60, 50),
    (50, 60, 60)
]

class CameraSystemDemo:
    def __init__(self):
        self.server: Optional[MinecraftServer] = None
        self.client: Optional[MinecraftClient] = None
        self.server_thread: Optional[threading.Thread] = None
        self.client_thread: Optional[threading.Thread] = None
        
    async def start_server(self):
        """D√©marre le serveur Minecraft."""
        print("üöÄ D√©marrage du serveur Minecraft...")
        self.server = MinecraftServer()
        
        # D√©marrer le serveur dans un thread s√©par√©
        def run_server():
            asyncio.run(self.server.start_server(port=SERVER_PORT))
        
        self.server_thread = threading.Thread(target=run_server, daemon=True)
        self.server_thread.start()
        
        # Attendre que le serveur d√©marre
        await asyncio.sleep(2)
        print("‚úÖ Serveur Minecraft d√©marr√©")
        
    def start_client(self):
        """D√©marre le client Minecraft."""
        print("üéÆ D√©marrage du client Minecraft...")
        self.client = MinecraftClient(
            position=(45.0, 60.0, 45.0),
            block_type="STONE",
            server_host="localhost",
            server_port=CLIENT_PORT,
            enable_gui=False  # Mode headless pour la d√©mo
        )
        
        # D√©marrer le client dans un thread s√©par√©
        def run_client():
            self.client.start_server()
            self.client.run()
        
        self.client_thread = threading.Thread(target=run_client, daemon=True)
        self.client_thread.start()
        
        # Attendre que le client d√©marre
        time.sleep(3)
        print("‚úÖ Client Minecraft d√©marr√©")
        
    def place_camera_blocks(self):
        """Place des blocs cam√©ra via l'API du client."""
        print("üìπ Placement des blocs cam√©ra...")
        client_url = f"http://localhost:{CLIENT_PORT}"
        
        for i, position in enumerate(TEST_POSITIONS):
            x, y, z = position
            try:
                response = requests.post(
                    f"{client_url}/place_block",
                    params={"x": x, "y": y, "z": z, "block_type": "CAMERA"},
                    timeout=5
                )
                
                if response.status_code == 200:
                    print(f"  ‚úÖ Cam√©ra {i+1} plac√©e √† {position}")
                else:
                    print(f"  ‚ùå Erreur placement cam√©ra {i+1}: {response.status_code}")
                    print(f"     Response: {response.text}")
                    
            except Exception as e:
                print(f"  ‚ùå Erreur placement cam√©ra {i+1} √† {position}: {e}")
                
        # Attendre que les cam√©ras se cr√©ent
        print("‚è≥ Attente de la cr√©ation des cam√©ras...")
        time.sleep(3)
        
    def test_cameras(self):
        """Teste les cam√©ras cr√©√©es."""
        print("üîç Test des cam√©ras cr√©√©es...")
        cameras = camera_manager.get_cameras()
        
        if not cameras:
            print("‚ùå Aucune cam√©ra cr√©√©e!")
            return False
            
        print(f"‚úÖ {len(cameras)} cam√©ra(s) cr√©√©e(s)")
        
        success_count = 0
        for i, camera in enumerate(cameras):
            print(f"\n--- Test Cam√©ra {i+1}: {camera['id']} ---")
            print(f"Position: {camera['position']}")
            print(f"Port: {camera['port']}")
            print(f"URL: {camera['url']}")
            print(f"√âtat: {'actif' if camera['running'] else 'inactif'}")
            
            # Test de connectivit√© de base
            try:
                response = requests.get(camera['url'], timeout=5)
                if response.status_code == 200:
                    print("  ‚úÖ Serveur FastAPI accessible")
                    success_count += 1
                    
                    # Test de l'endpoint de vue
                    try:
                        view_response = requests.get(camera['view_endpoint'], timeout=10)
                        if view_response.status_code == 200:
                            print(f"  ‚úÖ Endpoint de vue accessible ({len(view_response.content)} bytes)")
                        else:
                            print(f"  ‚ö†Ô∏è  Endpoint de vue: {view_response.status_code}")
                    except Exception as e:
                        print(f"  ‚ö†Ô∏è  Erreur endpoint de vue: {e}")
                        
                else:
                    print(f"  ‚ùå Serveur non accessible: {response.status_code}")
                    
            except Exception as e:
                print(f"  ‚ùå Erreur de connexion: {e}")
                
        print(f"\nüìä R√©sultat: {success_count}/{len(cameras)} cam√©ras fonctionnelles")
        return success_count > 0
        
    def cleanup_cameras(self):
        """Nettoie les cam√©ras cr√©√©es."""
        print("\nüßπ Nettoyage des cam√©ras...")
        for position in TEST_POSITIONS:
            try:
                if camera_manager.remove_camera_user(position):
                    print(f"  ‚úÖ Cam√©ra supprim√©e √† {position}")
                else:
                    print(f"  ‚ö†Ô∏è  Aucune cam√©ra trouv√©e √† {position}")
            except Exception as e:
                print(f"  ‚ùå Erreur suppression cam√©ra √† {position}: {e}")
                
    async def run_demo(self):
        """Ex√©cute la d√©mo compl√®te."""
        print("=" * 60)
        print("üé¨ D√âMO DU SYST√àME DE CAM√âRAS MINECRAFT")
        print("=" * 60)
        
        try:
            # 1. D√©marrer le serveur
            await self.start_server()
            
            # 2. D√©marrer le client
            self.start_client()
            
            # 3. Placer des blocs cam√©ra
            self.place_camera_blocks()
            
            # 4. Tester les cam√©ras
            cameras_working = self.test_cameras()
            
            if cameras_working:
                print("\nüéâ SUCC√àS: Le syst√®me de cam√©ras fonctionne!")
                
                # Montrer comment utiliser le visualiseur
                print("\nüìã Pour visualiser les cam√©ras:")
                print("   python3 camera_viewer.py --list")
                print("   python3 camera_viewer.py --position 50 60 50")
                print("   python3 camera_viewer.py --camera Camera_50_60_50")
                
            else:
                print("\n‚ùå √âCHEC: Le syst√®me de cam√©ras ne fonctionne pas correctement")
                return 1
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  D√©mo interrompue par l'utilisateur")
        except Exception as e:
            print(f"\n‚ùå Erreur lors de la d√©mo: {e}")
            import traceback
            traceback.print_exc()
            return 1
        finally:
            # 5. Nettoyer
            self.cleanup_cameras()
            
        return 0
        
def main():
    demo = CameraSystemDemo()
    return asyncio.run(demo.run_demo())

if __name__ == "__main__":
    sys.exit(main())