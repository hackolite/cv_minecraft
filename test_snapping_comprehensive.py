#!/usr/bin/env python3
"""
Comprehensive test to validate that the snapping fix works in all directions.
This test demonstrates that le snapping fonctionne maintenant dans tous les sens.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from minecraft_physics import UnifiedCollisionManager

def comprehensive_snapping_test():
    """Test complet du snapping dans toutes les directions."""
    print("üîß TEST COMPLET: Le Snapping Fonctionne Dans Tous Les Sens")
    print("=" * 65)
    print("Avant la correction: le snapping ne fonctionnait pas dans les directions -X et -Z")
    print("Apr√®s la correction: le snapping fonctionne dans toutes les 6 directions")
    print()

    # Cr√©er un monde simple avec un seul bloc
    world = {(0, 0, 0): "stone"}
    manager = UnifiedCollisionManager(world)
    
    # Test de tous les mouvements qui tentent de traverser chaque face du bloc
    test_cases = [
        {
            "direction": "+X (vers la droite)",
            "start": (-1.0, 0.5, 0.5),
            "target": (0.8, 0.5, 0.5),  # Essaie de p√©n√©trer dans le bloc
            "expected": "Collision d√©tect√©e, joueur bloqu√©"
        },
        {
            "direction": "-X (vers la gauche)",
            "start": (1.0, 0.5, 0.5),
            "target": (0.3, 0.5, 0.5),  # Essaie de p√©n√©trer dans le bloc
            "expected": "Collision d√©tect√©e, joueur bloqu√© (√âTAIT CASS√â AVANT)"
        },
        {
            "direction": "+Y (vers le haut)",
            "start": (0.5, -1.0, 0.5),
            "target": (0.5, 0.8, 0.5),  # Essaie de p√©n√©trer dans le bloc
            "expected": "Collision d√©tect√©e, joueur bloqu√©"
        },
        {
            "direction": "-Y (vers le bas)",
            "start": (0.5, 2.0, 0.5),
            "target": (0.5, -0.8, 0.5),  # Essaie de p√©n√©trer dans le bloc
            "expected": "Collision d√©tect√©e, joueur bloqu√©"
        },
        {
            "direction": "+Z (vers l'avant)",
            "start": (0.5, 0.5, -1.0),
            "target": (0.5, 0.5, 0.8),  # Essaie de p√©n√©trer dans le bloc
            "expected": "Collision d√©tect√©e, joueur bloqu√©"
        },
        {
            "direction": "-Z (vers l'arri√®re)",
            "start": (0.5, 0.5, 1.0),
            "target": (0.5, 0.5, 0.3),  # Essaie de p√©n√©trer dans le bloc
            "expected": "Collision d√©tect√©e, joueur bloqu√© (√âTAIT CASS√â AVANT)"
        }
    ]

    print("üìä R√©sultats des tests:")
    print()
    
    all_passed = True
    for i, test in enumerate(test_cases, 1):
        print(f"{i}. Direction {test['direction']}")
        print(f"   De: {test['start']} ‚Üí Vers: {test['target']}")
        print(f"   Attendu: {test['expected']}")
        
        safe_pos, collision_info = manager.resolve_collision(test['start'], test['target'])
        
        # V√©rifier si la collision a √©t√© d√©tect√©e
        collision_detected = any(collision_info[axis] for axis in ['x', 'y', 'z'])
        
        # V√©rifier si le joueur a √©t√© emp√™ch√© de bouger vers le bloc
        movement_blocked = safe_pos == test['start']
        
        print(f"   R√©sultat: {safe_pos}")
        print(f"   Collision info: {collision_info}")
        
        if collision_detected and movement_blocked:
            print(f"   ‚úÖ SUCC√àS - Collision d√©tect√©e et mouvement bloqu√©")
        elif collision_detected and not movement_blocked:
            print(f"   ‚ö†Ô∏è  PARTIEL - Collision d√©tect√©e mais mouvement partiel autoris√©")
        else:
            print(f"   ‚ùå √âCHEC - Aucune collision d√©tect√©e")
            all_passed = False
        print()
    
    print("üéØ R√©sum√©:")
    if all_passed:
        print("‚úÖ TOUS LES TESTS R√âUSSIS!")
        print("   Le snapping fonctionne maintenant dans toutes les directions!")
        print("   Les probl√®mes dans les directions -X et -Z ont √©t√© corrig√©s.")
    else:
        print("‚ùå Certains tests ont √©chou√©.")
    
    print()
    print("üîç Test diagonal pour v√©rifier le comportement combin√©:")
    
    # Test de mouvement diagonal qui devrait √™tre partiellement bloqu√©
    start_diagonal = (1.5, 0.5, 1.5)
    target_diagonal = (-0.5, 0.5, -0.5)  # Mouvement diagonal vers le bloc
    
    safe_diagonal, collision_diagonal = manager.resolve_collision(start_diagonal, target_diagonal)
    
    print(f"   Mouvement diagonal: {start_diagonal} ‚Üí {target_diagonal}")
    print(f"   R√©sultat: {safe_diagonal}")
    print(f"   Collision: {collision_diagonal}")
    
    # Calculer l'efficacit√© du mouvement
    intended_distance = ((target_diagonal[0] - start_diagonal[0])**2 + 
                        (target_diagonal[1] - start_diagonal[1])**2 + 
                        (target_diagonal[2] - start_diagonal[2])**2)**0.5
    actual_distance = ((safe_diagonal[0] - start_diagonal[0])**2 + 
                      (safe_diagonal[1] - start_diagonal[1])**2 + 
                      (safe_diagonal[2] - start_diagonal[2])**2)**0.5
    
    efficiency = actual_distance / intended_distance if intended_distance > 0 else 0
    print(f"   Efficacit√© du mouvement: {efficiency:.1%}")
    
    if efficiency > 0:
        print("   ‚úÖ Mouvement diagonal partiellement autoris√© (comportement correct)")
    else:
        print("   ‚ö†Ô∏è  Mouvement diagonal compl√®tement bloqu√©")

if __name__ == "__main__":
    comprehensive_snapping_test()