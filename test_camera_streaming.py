#!/usr/bin/env python3
"""
Test du syst√®me de streaming cam√©ra RTSP
Test for RTSP camera streaming system
"""

import asyncio
import logging
import time
from observer_camera import camera_manager, ObserverCamera
from rtsp_video_streamer import EnhancedRTSPServer
from user_manager import CameraUser

logging.basicConfig(level=logging.INFO, format="[%(asctime)s] %(levelname)s - %(message)s")

async def test_camera_creation():
    """Test de cr√©ation et capture de cam√©ra d'observateur."""
    logging.info("üß™ Test de cr√©ation de cam√©ra d'observateur")
    
    # Cr√©er une cam√©ra
    camera = camera_manager.create_camera(
        observer_id="test_observer",
        position=(30.0, 50.0, 80.0),
        rotation=(0.0, 0.0),
        resolution=(640, 480)
    )
    
    assert camera is not None, "La cam√©ra n'a pas √©t√© cr√©√©e"
    assert camera.observer_id == "test_observer", "ID observateur incorrect"
    assert camera.position == (30.0, 50.0, 80.0), "Position incorrecte"
    
    # D√©marrer la capture (sans mod√®le du monde pour le test)
    camera.start_capture(None)
    
    # Attendre un peu pour la capture
    await asyncio.sleep(2)
    
    # V√©rifier qu'on a des frames
    frame = camera.get_latest_frame()
    assert frame is not None, "Aucun frame captur√©"
    assert 'data' in frame, "Frame sans donn√©es"
    assert 'timestamp' in frame, "Frame sans timestamp"
    
    logging.info(f"‚úÖ Frame captur√©: {len(frame['data'])} bytes √† {frame['timestamp']}")
    
    # Arr√™ter la capture
    camera.stop_capture()
    
    # Supprimer la cam√©ra
    camera_manager.remove_camera("test_observer")
    
    logging.info("‚úÖ Test de cr√©ation de cam√©ra r√©ussi")

async def test_enhanced_rtsp_server():
    """Test du serveur RTSP am√©lior√© avec streaming vid√©o."""
    logging.info("üß™ Test du serveur RTSP am√©lior√©")
    
    # Cr√©er un utilisateur RTSP test
    test_user = CameraUser(
        id="test_user",
        name="TestObserver", 
        position=(40.0, 60.0, 90.0),
        rotation=(45.0, 0.0),
        rtsp_port=8558  # Port diff√©rent pour √©viter les conflits
    )
    
    # Cr√©er une cam√©ra pour cet utilisateur
    camera = camera_manager.create_camera(
        observer_id=test_user.id,
        position=test_user.position,
        rotation=test_user.rotation,
        resolution=(320, 240)  # R√©solution plus petite pour le test
    )
    
    # Cr√©er le serveur RTSP am√©lior√©
    rtsp_server = EnhancedRTSPServer(test_user, camera)
    
    try:
        # D√©marrer le serveur
        await rtsp_server.start()
        logging.info(f"‚úÖ Serveur RTSP am√©lior√© d√©marr√© sur {test_user.rtsp_url}")
        
        # Laisser le serveur tourner un peu
        await asyncio.sleep(3)
        
        # V√©rifier que la cam√©ra capture des frames
        frame = camera.get_latest_frame()
        if frame:
            logging.info(f"‚úÖ Cam√©ra active: frame de {len(frame['data'])} bytes")
        else:
            logging.warning("‚ö†Ô∏è  Aucun frame captur√© par la cam√©ra")
        
        logging.info("‚úÖ Test du serveur RTSP am√©lior√© r√©ussi")
        
    except Exception as e:
        logging.error(f"‚ùå Erreur dans le test du serveur RTSP: {e}")
        raise
    finally:
        # Nettoyer
        await rtsp_server.stop()
        camera_manager.remove_camera(test_user.id)

async def test_multiple_cameras():
    """Test de multiples cam√©ras simultan√©es."""
    logging.info("üß™ Test de multiples cam√©ras simultan√©es")
    
    # Cr√©er plusieurs cam√©ras
    cameras = []
    for i in range(3):
        camera_id = f"multi_camera_{i}"
        camera = camera_manager.create_camera(
            observer_id=camera_id,
            position=(30.0 + i * 10, 50.0, 80.0 - i * 10),
            rotation=(i * 90.0, 0.0),
            resolution=(320, 240)
        )
        cameras.append((camera_id, camera))
        
    # D√©marrer toutes les cam√©ras (avec mod√®le du monde None pour le test)
    for camera_id, camera in cameras:
        camera.start_capture(None)  # D√©marrer individuellement pour le test
    
    # Attendre un peu
    await asyncio.sleep(3)
    
    # V√©rifier que toutes les cam√©ras capturent
    active_cameras = 0
    for camera_id, camera in cameras:
        frame = camera.get_latest_frame()
        if frame:
            active_cameras += 1
            logging.info(f"‚úÖ Cam√©ra {camera_id}: {len(frame['data'])} bytes")
        else:
            logging.warning(f"‚ö†Ô∏è  Cam√©ra {camera_id}: pas de frame")
    
    assert active_cameras >= 3, f"Seulement {active_cameras}/3 cam√©ras actives"
    
    # Nettoyer
    camera_manager.stop_all_cameras()
    for camera_id, _ in cameras:
        camera_manager.remove_camera(camera_id)
        
    logging.info("‚úÖ Test de multiples cam√©ras r√©ussi")

async def test_camera_position_update():
    """Test de mise √† jour de position de cam√©ra."""
    logging.info("üß™ Test de mise √† jour de position de cam√©ra")
    
    # Cr√©er une cam√©ra
    camera = camera_manager.create_camera(
        observer_id="position_test",
        position=(10.0, 20.0, 30.0),
        rotation=(0.0, 0.0)
    )
    
    original_position = camera.position
    
    # Mettre √† jour la position
    new_position = (50.0, 60.0, 70.0)
    new_rotation = (90.0, 45.0)
    camera.update_position(new_position, new_rotation)
    
    assert camera.position == new_position, f"Position non mise √† jour: {camera.position} != {new_position}"
    assert camera.rotation == new_rotation, f"Rotation non mise √† jour: {camera.rotation} != {new_rotation}"
    
    logging.info(f"‚úÖ Position mise √† jour: {original_position} -> {new_position}")
    
    # Nettoyer
    camera_manager.remove_camera("position_test")
    
    logging.info("‚úÖ Test de mise √† jour de position r√©ussi")

async def main():
    """Ex√©cute tous les tests du syst√®me de streaming cam√©ra."""
    logging.info("üéØ D√©marrage des tests du syst√®me de streaming cam√©ra RTSP")
    
    try:
        # Test 1: Cr√©ation de cam√©ra basique
        await test_camera_creation()
        
        # Test 2: Serveur RTSP am√©lior√©
        await test_enhanced_rtsp_server()
        
        # Test 3: Multiples cam√©ras
        await test_multiple_cameras()
        
        # Test 4: Mise √† jour de position
        await test_camera_position_update()
        
        logging.info("")
        logging.info("üéâ TOUS LES TESTS DE STREAMING R√âUSSIS!")
        logging.info("‚úÖ Syst√®me de cam√©ras d'observateurs fonctionnel")
        logging.info("‚úÖ Serveurs RTSP am√©lior√©s avec streaming vid√©o")
        logging.info("‚úÖ Capture de frames depuis perspectives d'observateurs")
        logging.info("‚úÖ Support multi-cam√©ras simultan√©es")
        
        return 0
        
    except Exception as e:
        logging.error(f"‚ùå Erreur dans les tests: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit(asyncio.run(main()))