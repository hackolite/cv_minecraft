#!/usr/bin/env python3
"""
Validation finale de l'impl√©mentation de l'agent de travers√©e ill√©gale.
Test complet de tous les aspects selon le problem statement.
"""

import logging
import sys
import os
import io
from datetime import datetime

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from illegal_traversal_agent import IllegalBlockTraversalAgent


def capture_logs():
    """Capture les logs pour validation."""
    log_capture = io.StringIO()
    handler = logging.StreamHandler(log_capture)
    handler.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s,%(msecs)03d - %(levelname)s - %(message)s', 
                                 datefmt='%Y-%m-%d %H:%M:%S')
    handler.setFormatter(formatter)
    
    traversal_logger = logging.getLogger('illegal_traversal')
    traversal_logger.setLevel(logging.INFO)
    traversal_logger.addHandler(handler)
    
    return log_capture


def validate_problem_statement_requirements():
    """Valide que tous les requirements du problem statement sont respect√©s."""
    print("üîç VALIDATION FINALE - Requirements du Problem Statement")
    print("=" * 80)
    
    log_capture = capture_logs()
    
    # Cr√©er un monde avec bloc solide
    world = {(10, 10, 10): 'stone'}
    agent = IllegalBlockTraversalAgent(world)
    
    # Sc√©nario requis : travers√©e de bloc solide
    player_id = "uuid-1234-5678-abcd-ef00"
    player_name = "Joueur"
    old_position = (9.0, 10.0, 10.0)
    new_position = (10.5, 10.5, 10.5)
    
    print("Sc√©nario de test:")
    print(f"  Joueur: {player_name} ({player_id})")
    print(f"  Mouvement: {old_position} ‚Üí {new_position}")
    print(f"  Bloc: (10, 10, 10) type=stone")
    print()
    
    # D√©clenchement de la d√©tection
    result = agent.check_traversal(player_id, player_name, old_position, new_position)
    agent.log_disconnection(player_id, player_name)
    
    # Analyse des logs g√©n√©r√©s
    log_output = log_capture.getvalue()
    log_lines = [line.strip() for line in log_output.split('\n') if line.strip()]
    
    print("VALIDATION DES REQUIREMENTS:")
    print("-" * 40)
    
    # 1. V√©rifier la d√©tection
    assert result == True, "‚ùå √âCHEC: D√©tection de travers√©e ill√©gale"
    print("‚úÖ 1. D√©tection de travers√©e ill√©gale: OK")
    
    # 2. V√©rifier le format de log WARNING principal
    warning_log = None
    for line in log_lines:
        if "WARNING" in line and "üö® ILLEGAL BLOCK TRAVERSAL" in line:
            warning_log = line
            break
    
    assert warning_log is not None, "‚ùå √âCHEC: Log WARNING principal manquant"
    assert "Player Joueur (uuid-1234-5678-abcd-ef00)" in warning_log, "‚ùå √âCHEC: Info joueur incorrecte"
    assert "traversed solid block (10, 10, 10)" in warning_log, "‚ùå √âCHEC: Info bloc incorrecte"
    print("‚úÖ 2. Log WARNING avec format requis: OK")
    
    # 3. V√©rifier les logs INFO d√©taill√©s
    info_logs = [line for line in log_lines if "INFO" in line]
    
    old_pos_log = any("Old position: (9.0, 10.0, 10.0)" in line for line in info_logs)
    assert old_pos_log, "‚ùå √âCHEC: Log ancien position manquant"
    print("‚úÖ 3a. Log ancienne position: OK")
    
    new_pos_log = any("New position: (10.5, 10.5, 10.5)" in line for line in info_logs)
    assert new_pos_log, "‚ùå √âCHEC: Log nouvelle position manquant"
    print("‚úÖ 3b. Log nouvelle position: OK")
    
    block_type_log = any("Block type: stone" in line for line in info_logs)
    assert block_type_log, "‚ùå √âCHEC: Log type bloc manquant"
    print("‚úÖ 3c. Log type de bloc: OK")
    
    # 4. V√©rifier le log de d√©connexion
    disconnect_log = any("disconnected for illegal block traversal" in line for line in info_logs)
    assert disconnect_log, "‚ùå √âCHEC: Log d√©connexion manquant"
    print("‚úÖ 4. Log de d√©connexion: OK")
    
    # 5. V√©rifier le format timestamp
    timestamp_format_ok = all(
        len(line.split(' - ')[0]) >= 19  # Format YYYY-MM-DD HH:MM:SS,mmm
        for line in log_lines if ' - ' in line
    )
    assert timestamp_format_ok, "‚ùå √âCHEC: Format timestamp incorrect"
    print("‚úÖ 5. Format timestamp avec millisecondes: OK")
    
    print("-" * 40)
    print("‚úÖ TOUS LES REQUIREMENTS SONT VALID√âS!")
    
    return True


def validate_integration_aspects():
    """Valide les aspects d'int√©gration syst√®me."""
    print("\nüîó VALIDATION - Aspects d'int√©gration")
    print("=" * 80)
    
    # Test avec diff√©rents types de blocs
    world = {
        (10, 10, 10): 'stone',
        (11, 10, 10): 'grass',
        (12, 10, 10): 'wood', 
        (13, 10, 10): 'sand',
        (14, 10, 10): 'brick',
        (15, 10, 10): 'leaf',
        (16, 10, 10): 'water',
        (17, 10, 10): 'air'  # Ne doit pas d√©clencher
    }
    
    agent = IllegalBlockTraversalAgent(world)
    
    solid_blocks = ['stone', 'grass', 'wood', 'sand', 'brick', 'leaf', 'water']
    
    # Test avec blocs solides (doivent d√©clencher)
    for i, block_type in enumerate(solid_blocks):
        x = 10 + i
        result = agent.check_traversal(f"player{i}", f"Player{i}", 
                                     (x-1, 10.0, 10.0), (x+0.5, 10.5, 10.5))
        assert result == True, f"‚ùå √âCHEC: Bloc {block_type} devrait d√©clencher"
    
    print("‚úÖ 1. Tous les blocs solides d√©clenchent la d√©tection")
    
    # Test avec bloc air (ne doit pas d√©clencher)
    result = agent.check_traversal("player_air", "PlayerAir",
                                 (16.0, 10.0, 10.0), (17.5, 10.5, 10.5))
    assert result == False, "‚ùå √âCHEC: Bloc air ne devrait pas d√©clencher"
    print("‚úÖ 2. Les blocs d'air n'd√©clenchent pas la d√©tection")
    
    # Test avec joueur sans nom
    result = agent.check_traversal("player_noname", None,
                                 (9.0, 10.0, 10.0), (10.5, 10.5, 10.5))
    assert result == True, "‚ùå √âCHEC: D√©tection avec nom None"
    print("‚úÖ 3. Gestion des joueurs sans nom")
    
    print("‚úÖ INT√âGRATION VALID√âE!")
    
    return True


def show_final_example():
    """Montre l'exemple final conforme au problem statement."""
    print("\nüìã EXEMPLE FINAL - Format conforme au problem statement")
    print("=" * 80)
    
    # Setup logging pour le format exact
    log_capture = capture_logs()
    
    world = {(15, 20, 8): 'grass'}
    agent = IllegalBlockTraversalAgent(world)
    
    print("Exemple conforme aux exigences:")
    print("Travers√©e: Position (14.0, 20.0, 8.0) ‚Üí (15.5, 20.5, 8.5)")
    print("Bloc travers√©: (15, 20, 8) type=grass")
    print()
    print("Logs g√©n√©r√©s:")
    print("-" * 50)
    
    # G√©n√©ration de l'exemple
    agent.check_traversal("uuid-example-123", "Joueur", (14.0, 20.0, 8.0), (15.5, 20.5, 8.5))
    agent.log_disconnection("uuid-example-123", "Joueur")
    
    # Affichage des logs
    logs = log_capture.getvalue()
    for line in logs.split('\n'):
        if line.strip() and ('WARNING' in line or ('INFO' in line and any(x in line for x in ['Old position', 'New position', 'Block type', 'disconnected']))):
            print(line)
    
    print("-" * 50)
    print("‚úÖ Format exactement conforme aux exigences du problem statement")
    
    return True


def main():
    """Validation finale compl√®te."""
    print("üöÄ VALIDATION FINALE COMPL√àTE")
    print("Agent de D√©tection de Travers√©e Ill√©gale de Blocs")
    print("Minecraft CV - Implementation selon problem statement")
    print("=" * 80)
    
    try:
        # Validation des requirements principaux
        validate_problem_statement_requirements()
        
        # Validation des aspects d'int√©gration
        validate_integration_aspects()
        
        # Exemple final
        show_final_example()
        
        print("\n" + "=" * 80)
        print("üéâ VALIDATION FINALE R√âUSSIE!")
        print("‚úÖ Tous les requirements du problem statement sont impl√©ment√©s")
        print("‚úÖ L'agent fonctionne correctement dans tous les cas")
        print("‚úÖ Le format de logging est exactement conforme")
        print("‚úÖ L'int√©gration serveur est transparente")
        print("‚úÖ La d√©connexion automatique fonctionne")
        print("‚úÖ Pr√™t pour la production!")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå √âCHEC DE LA VALIDATION: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)