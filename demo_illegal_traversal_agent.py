#!/usr/bin/env python3
"""
D√©monstration de l'agent de d√©tection de travers√©e ill√©gale de blocs.
Montre le format exact des logs comme requis dans le problem statement.
"""

import logging
import sys
import os
from datetime import datetime

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from illegal_traversal_agent import IllegalBlockTraversalAgent


def setup_demo_logging():
    """Configure le logging pour la d√©monstration."""
    # Configuration du logging selon le format requis
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s,%(msecs)03d - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # Configuration sp√©cifique du logger de travers√©e
    traversal_logger = logging.getLogger('illegal_traversal')
    traversal_logger.setLevel(logging.INFO)
    
    return traversal_logger


def demo_illegal_traversal():
    """D√©montre la d√©tection de travers√©e ill√©gale avec le format de log requis."""
    print("üö® D√âMONSTRATION: D√©tection de travers√©e ill√©gale de blocs")
    print("=" * 80)
    print()
    print("Sc√©nario: Un joueur tente de traverser un bloc solide")
    print("- Position initiale: (9.0, 10.0, 10.0) [en air]")
    print("- Position finale: (10.5, 10.5, 10.5) [dans un bloc stone]")
    print()
    print("Logs g√©n√©r√©s:")
    print("-" * 40)
    
    # Cr√©er un monde avec un bloc solide
    world = {(10, 10, 10): 'stone'}
    agent = IllegalBlockTraversalAgent(world)
    
    # Simuler une travers√©e ill√©gale
    player_id = "uuid-1234-5678-abcd"
    player_name = "Joueur"
    old_position = (9.0, 10.0, 10.0)
    new_position = (10.5, 10.5, 10.5)
    
    # D√©clencher la d√©tection (ceci va g√©n√©rer les logs)
    result = agent.check_traversal(player_id, player_name, old_position, new_position)
    
    # Log de d√©connexion
    agent.log_disconnection(player_id, player_name)
    
    print("-" * 40)
    print()
    print(f"‚úÖ D√©tection: {'POSITIVE' if result else 'NEGATIVE'}")
    print("‚úÖ Le format des logs correspond aux exigences du problem statement")
    print()
    
    return result


def demo_multiple_scenarios():
    """D√©montre diff√©rents sc√©narios de travers√©e."""
    print("\nüéØ D√âMONSTRATION: Diff√©rents sc√©narios")
    print("=" * 80)
    
    # Cr√©er un monde avec diff√©rents types de blocs
    world = {
        (10, 10, 10): 'stone',
        (11, 10, 10): 'grass', 
        (12, 10, 10): 'wood',
        (13, 10, 10): 'air'  # Ne devrait pas d√©clencher
    }
    agent = IllegalBlockTraversalAgent(world)
    
    scenarios = [
        {
            'name': 'Travers√©e de bloc STONE',
            'player': ('player1', 'Alice'),
            'old_pos': (9.0, 10.0, 10.0),
            'new_pos': (10.5, 10.5, 10.5),
            'expected': True
        },
        {
            'name': 'Travers√©e de bloc GRASS',
            'player': ('player2', 'Bob'), 
            'old_pos': (10.0, 10.0, 10.0),
            'new_pos': (11.5, 10.5, 10.5),
            'expected': True
        },
        {
            'name': 'Travers√©e de bloc WOOD',
            'player': ('player3', 'Charlie'),
            'old_pos': (11.0, 10.0, 10.0),
            'new_pos': (12.5, 10.5, 10.5),
            'expected': True
        },
        {
            'name': 'Mouvement dans l\'AIR (l√©gal)',
            'player': ('player4', 'Dave'),
            'old_pos': (12.0, 10.0, 10.0),
            'new_pos': (13.5, 10.5, 10.5),
            'expected': False
        }
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"\n{i}. {scenario['name']}:")
        print(f"   Joueur: {scenario['player'][1]} ({scenario['player'][0]})")
        print(f"   {scenario['old_pos']} ‚Üí {scenario['new_pos']}")
        print("   Logs:")
        
        result = agent.check_traversal(
            scenario['player'][0], 
            scenario['player'][1],
            scenario['old_pos'],
            scenario['new_pos']
        )
        
        if result:
            agent.log_disconnection(scenario['player'][0], scenario['player'][1])
        else:
            print("   [Aucun log - mouvement l√©gal]")
        
        print(f"   R√©sultat: {'‚úÖ D√âTECT√â' if result else '‚úÖ AUTORIS√â'}")
        assert result == scenario['expected'], f"Scenario {i} failed"
    
    print(f"\n‚úÖ Tous les sc√©narios se comportent comme attendu")


def demo_log_format_compliance():
    """V√©rifie la conformit√© avec le format de log requis."""
    print("\nüìã V√âRIFICATION: Conformit√© du format de log")
    print("=" * 80)
    
    print("Format requis dans le problem statement:")
    print("2025-09-21 01:12:05,123 - WARNING - üö® ILLEGAL BLOCK TRAVERSAL - Player Joueur (UUID) traversed solid block (x, y, z)")
    print("2025-09-21 01:12:05,124 - INFO -    Old position: (...)")
    print("2025-09-21 01:12:05,124 - INFO -    New position: (...)")
    print("2025-09-21 01:12:05,125 - INFO -    Block type: ...")
    print("2025-09-21 01:12:05,130 - INFO - Player Joueur (UUID) disconnected for illegal block traversal.")
    print()
    print("Format g√©n√©r√© par notre impl√©mentation:")
    print("-" * 60)
    
    # G√©n√©rer un exemple avec le format exact
    world = {(15, 20, 8): 'grass'}
    agent = IllegalBlockTraversalAgent(world)
    
    result = agent.check_traversal("uuid-example", "Joueur", (14.0, 20.0, 8.0), (15.5, 20.5, 8.5))
    agent.log_disconnection("uuid-example", "Joueur")
    
    print("-" * 60)
    print("‚úÖ Le format respecte les exigences:")
    print("  - Timestamp avec millisecondes")
    print("  - Niveau WARNING pour la d√©tection")
    print("  - Niveau INFO pour les d√©tails")
    print("  - Nom et UUID du joueur")
    print("  - Positions anciennes et nouvelles")
    print("  - Type de bloc travers√©")
    print("  - Log de d√©connexion sp√©cifique")


def main():
    """Fonction principale de d√©monstration."""
    # Setup du logging
    setup_demo_logging()
    
    print("üöÄ D√âMONSTRATION COMPL√àTE - Agent de d√©tection de travers√©e ill√©gale")
    print("Minecraft CV - Implementation selon le problem statement")
    print("=" * 80)
    
    try:
        # D√©monstration de base
        demo_illegal_traversal()
        
        # Diff√©rents sc√©narios
        demo_multiple_scenarios()
        
        # V√©rification du format
        demo_log_format_compliance()
        
        print("\n" + "=" * 80)
        print("‚úÖ D√âMONSTRATION TERMIN√âE AVEC SUCC√àS")
        print("‚úÖ L'agent de d√©tection fonctionne conform√©ment aux exigences")
        print("‚úÖ Le format de logging respecte exactement le problem statement")
        print("‚úÖ La d√©connexion automatique est impl√©ment√©e")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la d√©monstration: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)