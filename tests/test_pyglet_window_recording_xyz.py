#!/usr/bin/env python3
"""
Test complet pour la cr√©ation de fen√™tres Pyglet et l'enregistrement du buffer
avec suivi des coordonn√©es x, y, z.

Ce test v√©rifie que:
1. Les fen√™tres Pyglet peuvent √™tre cr√©√©es pour les cam√©ras
2. Le buffer Pyglet peut √™tre captur√© avec les coordonn√©es x, y, z
3. L'enregistrement fonctionne correctement
4. Les m√©tadonn√©es de position sont sauvegard√©es
5. L'int√©gration entre CubeWindow et GameRecorder fonctionne
"""

import os
import sys
import tempfile
import time
import json
from pathlib import Path

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Setup display for headless testing
os.environ['DISPLAY'] = ':99'

try:
    from protocol import Cube, CubeWindow, PYGLET_AVAILABLE
    from minecraft_client_fr import GameRecorder
    import pyglet
    from pyglet.gl import *
except ImportError as e:
    print(f"‚ö†Ô∏è  Import error: {e}")
    print("‚ö†Ô∏è  Skipping tests that require Pyglet")
    PYGLET_AVAILABLE = False


def test_cube_window_creation():
    """Test 1: V√©rifier la cr√©ation de fen√™tres Pyglet pour les cubes cam√©ra."""
    print("\n" + "=" * 70)
    print("Test 1: Cr√©ation de fen√™tres Pyglet pour cubes cam√©ra")
    print("=" * 70)
    
    if not PYGLET_AVAILABLE:
        print("‚ö†Ô∏è  Pyglet non disponible - test ignor√©")
        return True
    
    try:
        # Cr√©er un cube cam√©ra √† diff√©rentes positions
        positions = [
            (10, 50, 10, "camera_test_1"),
            (20, 60, 30, "camera_test_2"),
            (15, 55, 25, "camera_test_3"),
        ]
        
        cubes = []
        for x, y, z, cube_id in positions:
            print(f"\nüì¶ Cr√©ation cube cam√©ra '{cube_id}' √† position ({x}, {y}, {z})")
            cube = Cube(cube_id, (x, y, z), cube_type="camera")
            cubes.append(cube)
            
            # V√©rifier que la fen√™tre a √©t√© cr√©√©e
            assert cube.window is not None, f"La fen√™tre pour {cube_id} devrait √™tre cr√©√©e"
            assert hasattr(cube.window, 'window'), f"CubeWindow devrait avoir un attribut window"
            
            # V√©rifier que la position est correcte
            assert cube.position == (x, y, z), f"Position devrait √™tre ({x}, {y}, {z})"
            
            print(f"   ‚úÖ Fen√™tre cr√©√©e pour {cube_id}")
            print(f"   ‚úÖ Position: {cube.position}")
            print(f"   ‚úÖ Window type: {type(cube.window)}")
            print(f"   ‚úÖ Pyglet window: {type(cube.window.window)}")
        
        # Cleanup
        for cube in cubes:
            if cube.window:
                cube.window.close()
        
        print("\n‚úÖ Test 1: R√âUSSI - Toutes les fen√™tres cr√©√©es correctement")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Test 1: √âCHEC - {e}")
        import traceback
        traceback.print_exc()
        return False


def test_buffer_capture_with_position():
    """Test 2: V√©rifier la capture du buffer Pyglet avec coordonn√©es x, y, z."""
    print("\n" + "=" * 70)
    print("Test 2: Capture du buffer Pyglet avec coordonn√©es x, y, z")
    print("=" * 70)
    
    if not PYGLET_AVAILABLE:
        print("‚ö†Ô∏è  Pyglet non disponible - test ignor√©")
        return True
    
    try:
        # Cr√©er un cube cam√©ra √† une position sp√©cifique
        test_position = (25, 55, 35)
        cube = Cube("buffer_test_cam", test_position, cube_type="camera")
        
        print(f"\nüì¶ Cube cam√©ra cr√©√© √† position {test_position}")
        print(f"   Window: {cube.window is not None}")
        
        # V√©rifier que le cube window peut rendre et capturer
        if cube.window and cube.window.window:
            # Switch to camera context
            cube.window.window.switch_to()
            
            # Clear and render
            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
            cube.window._render_simple_scene()
            glFlush()
            
            # Capture buffer
            buffer = pyglet.image.get_buffer_manager().get_color_buffer()
            image_data = buffer.get_image_data()
            
            print(f"   ‚úÖ Buffer captur√©: {image_data.width}x{image_data.height}")
            print(f"   ‚úÖ Format: {image_data.format}")
            
            # V√©rifier que les donn√©es sont captur√©es
            raw_data = image_data.get_data('RGBA', image_data.width * 4)
            assert len(raw_data) > 0, "Les donn√©es du buffer devraient √™tre non vides"
            
            print(f"   ‚úÖ Donn√©es brutes: {len(raw_data)} bytes")
            print(f"   ‚úÖ Position de la cam√©ra: {cube.position}")
        
        # Cleanup
        if cube.window:
            cube.window.close()
        
        print("\n‚úÖ Test 2: R√âUSSI - Buffer captur√© avec position")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Test 2: √âCHEC - {e}")
        import traceback
        traceback.print_exc()
        return False


def test_game_recorder_with_camera_position():
    """Test 3: V√©rifier l'enregistrement avec GameRecorder et m√©tadonn√©es de position."""
    print("\n" + "=" * 70)
    print("Test 3: GameRecorder avec m√©tadonn√©es de position")
    print("=" * 70)
    
    if not PYGLET_AVAILABLE:
        print("‚ö†Ô∏è  Pyglet non disponible - test ignor√©")
        return True
    
    try:
        with tempfile.TemporaryDirectory() as tmpdir:
            # Cr√©er un cube cam√©ra √† une position sp√©cifique
            test_position = (30, 60, 40)
            cube = Cube("recorder_test_cam", test_position, cube_type="camera")
            
            print(f"\nüì¶ Cube cam√©ra cr√©√© √† position {test_position}")
            
            # Cr√©er un GameRecorder pour ce cube
            recorder = GameRecorder(output_dir=tmpdir, camera_cube=cube)
            
            print(f"   ‚úÖ GameRecorder cr√©√©")
            print(f"   ‚úÖ Cam√©ra associ√©e: {recorder.camera_cube.id if recorder.camera_cube else 'None'}")
            print(f"   ‚úÖ Position cam√©ra: {recorder.camera_cube.position if recorder.camera_cube else 'N/A'}")
            
            # D√©marrer l'enregistrement
            session_dir = recorder.start_recording()
            print(f"   ‚úÖ Enregistrement d√©marr√©: {session_dir}")
            
            # Simuler la capture de quelques frames
            if cube.window and cube.window.window:
                for i in range(3):
                    # Switch to camera context and render
                    cube.window.window.switch_to()
                    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
                    cube.window._render_simple_scene()
                    glFlush()
                    
                    # Capture frame
                    recorder.capture_frame()
                    time.sleep(0.05)  # Petit d√©lai entre les frames
                    
                    print(f"   üì∏ Frame {i+1} captur√©e √† position {cube.position}")
            
            # Arr√™ter l'enregistrement
            recorder.stop_recording()
            print(f"   ‚úÖ Enregistrement arr√™t√©")
            
            # V√©rifier que les fichiers ont √©t√© cr√©√©s
            session_path = Path(session_dir)
            assert session_path.exists(), "Le r√©pertoire de session devrait exister"
            
            # V√©rifier le fichier d'info
            info_file = session_path / "session_info.json"
            if info_file.exists():
                with open(info_file, 'r') as f:
                    info_data = json.load(f)
                print(f"   ‚úÖ M√©tadonn√©es de session: {info_data}")
            
            # V√©rifier les frames
            frame_files = list(session_path.glob("frame_*.jpg"))
            print(f"   ‚úÖ Frames sauvegard√©es: {len(frame_files)}")
            
            for frame_file in frame_files:
                print(f"      - {frame_file.name}: {frame_file.stat().st_size} bytes")
            
            # Cleanup
            if cube.window:
                cube.window.close()
            
            print("\n‚úÖ Test 3: R√âUSSI - Enregistrement avec m√©tadonn√©es")
            return True
        
    except Exception as e:
        print(f"\n‚ùå Test 3: √âCHEC - {e}")
        import traceback
        traceback.print_exc()
        return False


def test_multiple_camera_recordings():
    """Test 4: V√©rifier l'enregistrement de plusieurs cam√©ras simultan√©ment."""
    print("\n" + "=" * 70)
    print("Test 4: Enregistrement de plusieurs cam√©ras simultan√©ment")
    print("=" * 70)
    
    if not PYGLET_AVAILABLE:
        print("‚ö†Ô∏è  Pyglet non disponible - test ignor√©")
        return True
    
    try:
        with tempfile.TemporaryDirectory() as tmpdir:
            # Cr√©er plusieurs cam√©ras √† diff√©rentes positions
            cameras = [
                ("camera_1", (10, 50, 10)),
                ("camera_2", (20, 55, 20)),
                ("camera_3", (30, 60, 30)),
            ]
            
            recorders = []
            cubes = []
            
            for cam_id, position in cameras:
                print(f"\nüì¶ Cr√©ation cam√©ra '{cam_id}' √† position {position}")
                cube = Cube(cam_id, position, cube_type="camera")
                cubes.append(cube)
                
                # Cr√©er un sous-r√©pertoire pour chaque cam√©ra
                cam_dir = Path(tmpdir) / cam_id
                cam_dir.mkdir(exist_ok=True)
                
                recorder = GameRecorder(output_dir=str(cam_dir), camera_cube=cube)
                recorders.append(recorder)
                
                recorder.start_recording()
                print(f"   ‚úÖ Enregistrement d√©marr√© pour {cam_id}")
            
            # Simuler la capture de frames pour toutes les cam√©ras
            for i in range(2):
                print(f"\nüì∏ Capture frame {i+1} pour toutes les cam√©ras")
                for cube, recorder in zip(cubes, recorders):
                    if cube.window and cube.window.window:
                        cube.window.window.switch_to()
                        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
                        cube.window._render_simple_scene()
                        glFlush()
                        recorder.capture_frame()
                        print(f"   - {cube.id} @ {cube.position}")
                
                time.sleep(0.05)
            
            # Arr√™ter tous les enregistrements
            print("\n‚èπÔ∏è  Arr√™t de tous les enregistrements")
            for recorder in recorders:
                recorder.stop_recording()
            
            # V√©rifier que toutes les cam√©ras ont enregistr√©
            for cam_id, _ in cameras:
                cam_dir = Path(tmpdir) / cam_id
                sessions = list(cam_dir.glob("session_*"))
                assert len(sessions) > 0, f"Session pour {cam_id} devrait exister"
                
                session_dir = sessions[0]
                frame_files = list(session_dir.glob("frame_*.jpg"))
                print(f"   ‚úÖ {cam_id}: {len(frame_files)} frames enregistr√©es")
            
            # Cleanup
            for cube in cubes:
                if cube.window:
                    cube.window.close()
            
            print("\n‚úÖ Test 4: R√âUSSI - Enregistrement multi-cam√©ras")
            return True
        
    except Exception as e:
        print(f"\n‚ùå Test 4: √âCHEC - {e}")
        import traceback
        traceback.print_exc()
        return False


def test_position_tracking_in_metadata():
    """Test 5: V√©rifier que les positions x,y,z sont sauvegard√©es dans les m√©tadonn√©es."""
    print("\n" + "=" * 70)
    print("Test 5: Suivi des positions x,y,z dans les m√©tadonn√©es")
    print("=" * 70)
    
    if not PYGLET_AVAILABLE:
        print("‚ö†Ô∏è  Pyglet non disponible - test ignor√©")
        return True
    
    try:
        with tempfile.TemporaryDirectory() as tmpdir:
            # Cr√©er une cam√©ra et la d√©placer entre les captures
            test_positions = [
                (10, 50, 10),
                (15, 52, 15),
                (20, 54, 20),
            ]
            
            cube = Cube("moving_camera", test_positions[0], cube_type="camera")
            recorder = GameRecorder(output_dir=tmpdir, camera_cube=cube)
            
            print(f"\nüì¶ Cam√©ra mobile cr√©√©e")
            
            session_dir = recorder.start_recording()
            
            # Capturer une frame √† chaque position
            for i, position in enumerate(test_positions):
                cube.update_position(position)
                print(f"   üìç Position {i+1}: {position}")
                
                if cube.window and cube.window.window:
                    cube.window.window.switch_to()
                    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
                    cube.window._render_simple_scene()
                    glFlush()
                    recorder.capture_frame()
                
                time.sleep(0.05)
            
            recorder.stop_recording()
            
            # V√©rifier que les m√©tadonn√©es contiennent l'information de position
            info_file = Path(session_dir) / "session_info.json"
            if info_file.exists():
                with open(info_file, 'r') as f:
                    info_data = json.load(f)
                print(f"\n   ‚úÖ M√©tadonn√©es session: frame_count={info_data['frame_count']}, camera_id={info_data.get('camera_info', {}).get('camera_id', 'N/A')}")
                
                # V√©rifier le nombre de frames
                assert info_data['frame_count'] >= 3, "Devrait avoir au moins 3 frames"
                
                # V√©rifier que les info de cam√©ra sont pr√©sentes
                assert 'camera_info' in info_data, "camera_info devrait √™tre pr√©sent"
                assert 'position' in info_data['camera_info'], "position devrait √™tre pr√©sente"
            
            # V√©rifier les m√©tadonn√©es de frames avec positions x,y,z
            frames_file = Path(session_dir) / "frames_metadata.json"
            if frames_file.exists():
                with open(frames_file, 'r') as f:
                    frames_data = json.load(f)
                
                print(f"\n   ‚úÖ M√©tadonn√©es de frames: {len(frames_data)} frames")
                
                # V√©rifier que chaque frame a des m√©tadonn√©es de position
                for i, frame_meta in enumerate(frames_data):
                    assert 'camera_position' in frame_meta, f"Frame {i} devrait avoir camera_position"
                    pos = frame_meta['camera_position']
                    print(f"      Frame {i}: x={pos['x']}, y={pos['y']}, z={pos['z']}")
                    assert 'x' in pos and 'y' in pos and 'z' in pos, f"Frame {i} devrait avoir x, y, z"
                
                # V√©rifier que les positions correspondent aux d√©placements
                assert frames_data[0]['camera_position']['x'] == 10, "Frame 0 devrait √™tre √† x=10"
                assert frames_data[1]['camera_position']['x'] == 15, "Frame 1 devrait √™tre √† x=15"
                assert frames_data[2]['camera_position']['x'] == 20, "Frame 2 devrait √™tre √† x=20"
                
                print(f"\n   ‚úÖ Toutes les frames ont des positions x,y,z correctes")
            else:
                print(f"\n   ‚ö†Ô∏è  Fichier frames_metadata.json non trouv√©")
                return False
            
            # Cleanup
            if cube.window:
                cube.window.close()
            
            print("\n‚úÖ Test 5: R√âUSSI - Positions track√©es avec x,y,z dans m√©tadonn√©es")
            return True
        
    except Exception as e:
        print(f"\n‚ùå Test 5: √âCHEC - {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """Point d'entr√©e des tests."""
    print("\n" + "=" * 70)
    print("TESTS COMPLETS: Fen√™tres Pyglet et Enregistrement Buffer avec x,y,z")
    print("=" * 70)
    
    if not PYGLET_AVAILABLE:
        print("\n‚ö†Ô∏è  PYGLET NON DISPONIBLE")
        print("Les tests ne peuvent pas √™tre ex√©cut√©s sans Pyglet")
        print("Installez avec: pip install pyglet")
        return 1
    
    results = []
    
    # Ex√©cuter tous les tests
    results.append(("Test 1: Cr√©ation fen√™tres", test_cube_window_creation()))
    results.append(("Test 2: Capture buffer", test_buffer_capture_with_position()))
    results.append(("Test 3: GameRecorder", test_game_recorder_with_camera_position()))
    results.append(("Test 4: Multi-cam√©ras", test_multiple_camera_recordings()))
    results.append(("Test 5: Tracking position", test_position_tracking_in_metadata()))
    
    # R√©sum√© des r√©sultats
    print("\n" + "=" * 70)
    print("R√âSUM√â DES TESTS")
    print("=" * 70)
    
    total = len(results)
    passed = sum(1 for _, result in results if result)
    failed = total - passed
    
    for test_name, result in results:
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHEC"
        print(f"{status}: {test_name}")
    
    print("\n" + "-" * 70)
    print(f"Total: {total} | R√©ussis: {passed} | √âchou√©s: {failed}")
    print("=" * 70)
    
    if failed == 0:
        print("\nüéâ TOUS LES TESTS ONT R√âUSSI!")
        print("\nConclusions:")
        print("  ‚úÖ Les fen√™tres Pyglet sont cr√©√©es correctement")
        print("  ‚úÖ Le buffer Pyglet peut √™tre captur√© avec x,y,z")
        print("  ‚úÖ GameRecorder fonctionne avec les positions")
        print("  ‚úÖ L'enregistrement multi-cam√©ras fonctionne")
        print("  ‚úÖ Les m√©tadonn√©es sont sauvegard√©es correctement")
        return 0
    else:
        print(f"\n‚ö†Ô∏è  {failed} TEST(S) ONT √âCHOU√â")
        print("V√©rifiez les erreurs ci-dessus pour plus de d√©tails")
        return 1


if __name__ == "__main__":
    sys.exit(main())
