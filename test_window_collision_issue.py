#!/usr/bin/env python3
"""
Test pour reproduire le probl√®me sp√©cifique mentionn√©:
"quand ma position fait x+ et z+ et collisionne, je rentre dans le bloc"
"affiche dans la windows collision detect√©e quand il y a collision"
"la collision est souvent detect√©e mais sous certaines faces je rentre dans le bloc"

Ce test va cr√©er des sc√©narios o√π la collision est d√©tect√©e mais le joueur 
peut encore entrer dans le bloc sous certaines conditions.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from minecraft_physics import UnifiedCollisionManager, PLAYER_WIDTH, PLAYER_HEIGHT
import logging

# Configure logging to see collision messages
logging.basicConfig(level=logging.DEBUG)
collision_logger = logging.getLogger('collision')

def print_collision_debug(message):
    """Affiche les messages de collision dans la fen√™tre."""
    print(f"ü™ü COLLISION DETECT√âE: {message}")

def test_face_specific_collision_issues():
    """Test les probl√®mes de collision sp√©cifiques √† certaines faces."""
    print("üîç Test des probl√®mes de collision par face")
    print("=" * 60)
    
    # Cr√©er un monde avec un seul bloc
    world = {(5, 10, 5): 'stone'}
    manager = UnifiedCollisionManager(world)
    
    print(f"Bloc de pierre √†: (5, 10, 5)")
    print(f"Dimensions du joueur: {PLAYER_WIDTH}√ó{PLAYER_HEIGHT}")
    print()
    
    # Test cases probl√©matiques sp√©cifiques
    test_cases = [
        {
            'name': 'Mouvement +X +Z - Position initiale pr√®s du coin',
            'start': (4.9, 10.5, 4.9),  # Tr√®s proche du coin du bloc
            'target': (5.1, 10.5, 5.1), # Petit mouvement vers l'int√©rieur
            'description': 'Mouvement diagonal vers le coin du bloc'
        },
        {
            'name': 'Mouvement +X +Z - Position limite',
            'start': (4.5, 10.5, 4.5),  # √Ä la limite de la hitbox
            'target': (5.5, 10.5, 5.5), # Traverse compl√®tement le bloc
            'description': 'Mouvement depuis le bord de la hitbox'
        },
        {
            'name': 'Mouvement +X +Z - Micro-mouvement',
            'start': (4.95, 10.5, 4.95), # Presque dans le bloc
            'target': (5.05, 10.5, 5.05), # Petit saut dans le bloc
            'description': 'Micro-mouvement qui pourrait bypass la d√©tection'
        },
        {
            'name': 'Face Sud-Est (+X +Z)',
            'start': (4.8, 10.5, 4.8),   # Approche par le coin Sud-Est
            'target': (5.2, 10.5, 5.2),  # Entre dans le bloc
            'description': 'Entr√©e par la face Sud-Est du bloc'
        },
        {
            'name': 'Entr√©e par ar√™te',
            'start': (4.99, 10.5, 5.0),  # Sur l\'ar√™te X
            'target': (5.01, 10.5, 5.0), # Petit mouvement X
            'description': 'Mouvement le long d\'une ar√™te'
        }
    ]
    
    collision_detected_count = 0
    penetration_count = 0
    
    for i, test in enumerate(test_cases, 1):
        print(f"{i}. {test['name']}")
        print(f"   Description: {test['description']}")
        print(f"   D√©part: {test['start']}")
        print(f"   Cible: {test['target']}")
        
        start_pos = test['start']
        target_pos = test['target']
        
        # V√©rifier collision √† la position de d√©part
        start_collision = manager.check_block_collision(start_pos)
        print(f"   Collision d√©part: {start_collision}")
        
        # V√©rifier collision √† la position cible
        target_collision = manager.check_block_collision(target_pos)
        print(f"   Collision cible: {target_collision}")
        
        if target_collision:
            collision_detected_count += 1
            print_collision_debug(f"Position cible {target_pos} en collision avec bloc")
        
        # R√©soudre le mouvement
        safe_pos, collision_info = manager.resolve_collision(start_pos, target_pos)
        print(f"   Position s√ªre: {safe_pos}")
        print(f"   Info collision: {collision_info}")
        
        # V√©rifier si la position "s√ªre" est r√©ellement dans le bloc
        safe_collision = manager.check_block_collision(safe_pos)
        print(f"   Position s√ªre en collision: {safe_collision}")
        
        if safe_collision:
            penetration_count += 1
            print(f"   ‚ùå PROBL√àME: Position 's√ªre' est dans le bloc!")
            print_collision_debug(f"P√©n√©tration d√©tect√©e √† {safe_pos}")
        
        # V√©rifier la distance parcourue
        distance_intended = ((target_pos[0] - start_pos[0])**2 + 
                           (target_pos[2] - start_pos[2])**2)**0.5
        distance_actual = ((safe_pos[0] - start_pos[0])**2 + 
                         (safe_pos[2] - start_pos[2])**2)**0.5
        
        print(f"   Distance pr√©vue: {distance_intended:.3f}")
        print(f"   Distance r√©elle: {distance_actual:.3f}")
        
        # Si la distance r√©elle est proche de la distance pr√©vue et qu'il y a collision,
        # c'est suspect
        if distance_actual > distance_intended * 0.8 and target_collision:
            print(f"   ‚ö†Ô∏è  Mouvement suspect: grande distance malgr√© collision d√©tect√©e")
        
        print()
    
    print("üìä R√âSUM√â:")
    print(f"Total des tests: {len(test_cases)}")
    print(f"Collisions d√©tect√©es: {collision_detected_count}")
    print(f"P√©n√©trations dans le bloc: {penetration_count}")
    
    if penetration_count > 0:
        print(f"‚ùå {penetration_count} cas de p√©n√©tration d√©tect√©s!")
        return False
    else:
        print("‚úÖ Aucune p√©n√©tration d√©tect√©e")
        return True

def test_systematic_collision_detection():
    """Test syst√©matique de la d√©tection de collision autour du bloc."""
    print("\nüî¨ Test syst√©matique de d√©tection de collision")
    print("=" * 50)
    
    world = {(5, 10, 5): 'stone'}
    manager = UnifiedCollisionManager(world)
    
    # Grille de test autour du bloc
    test_positions = []
    for x_offset in [-0.6, -0.5, -0.4, -0.1, 0.0, 0.1, 0.4, 0.5, 0.6]:
        for z_offset in [-0.6, -0.5, -0.4, -0.1, 0.0, 0.1, 0.4, 0.5, 0.6]:
            pos = (5.0 + x_offset, 10.5, 5.0 + z_offset)
            test_positions.append(pos)
    
    collision_positions = []
    no_collision_positions = []
    
    for pos in test_positions:
        collision = manager.check_block_collision(pos)
        if collision:
            collision_positions.append(pos)
            print_collision_debug(f"Position {pos}")
        else:
            no_collision_positions.append(pos)
    
    print(f"Positions test√©es: {len(test_positions)}")
    print(f"Collisions d√©tect√©es: {len(collision_positions)}")
    print(f"Pas de collision: {len(no_collision_positions)}")
    
    # V√©rifier la coh√©rence: les positions tr√®s proches du centre du bloc 
    # devraient toutes √™tre en collision
    center_pos = (5.0, 10.5, 5.0)
    center_collision = manager.check_block_collision(center_pos)
    print(f"Collision au centre du bloc {center_pos}: {center_collision}")
    
    if not center_collision:
        print("‚ùå PROBL√àME: Pas de collision au centre du bloc!")
        return False
    
    return True

def main():
    """Ex√©cute tous les tests de collision."""
    print("üîç DIAGNOSTIC: Probl√®mes de collision avec faces de blocs")
    print("Issue: 'collision d√©tect√©e mais je rentre dans le bloc sous certaines faces'")
    print()
    
    try:
        # Test 1: Probl√®mes sp√©cifiques aux faces
        success1 = test_face_specific_collision_issues()
        
        # Test 2: Test syst√©matique
        success2 = test_systematic_collision_detection()
        
        overall_success = success1 and success2
        
        print("\n" + "=" * 60)
        if overall_success:
            print("‚úÖ AUCUN PROBL√àME DE P√âN√âTRATION D√âTECT√â")
            print("Le syst√®me de collision fonctionne correctement.")
        else:
            print("‚ùå PROBL√àMES DE COLLISION CONFIRM√âS")
            print("Des corrections sont n√©cessaires pour emp√™cher la p√©n√©tration.")
        
        return overall_success
        
    except Exception as e:
        print(f"\nüí• Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)